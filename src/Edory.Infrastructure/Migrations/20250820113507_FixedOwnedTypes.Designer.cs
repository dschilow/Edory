// <auto-generated />
using System;
using Edory.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Edory.Infrastructure.Migrations
{
    [DbContext(typeof(EdoryDbContext))]
    [Migration("20250820113507_FixedOwnedTypes")]
    partial class FixedOwnedTypes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Edory.Character.Domain.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("AdoptionCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorFamilyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatorFamilyId");

                    b.HasIndex("IsPublic");

                    b.ToTable("Characters", (string)null);
                });

            modelBuilder.Entity("Edory.Character.Domain.CharacterInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ExperienceCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("LastInteractionAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OriginalCharacterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OwnerFamilyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("LastInteractionAt");

                    b.HasIndex("OriginalCharacterId");

                    b.HasIndex("OwnerFamilyId");

                    b.ToTable("CharacterInstances", (string)null);
                });

            modelBuilder.Entity("Edory.Memory.Domain.CharacterMemory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CharacterInstanceId")
                        .HasColumnType("uuid")
                        .HasColumnName("character_instance_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Fragments")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("fragments");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("CharacterInstanceId")
                        .HasDatabaseName("ix_character_memories_character_instance_id");

                    b.HasIndex("LastUpdatedAt")
                        .HasDatabaseName("ix_character_memories_last_updated");

                    b.HasIndex("Type")
                        .HasDatabaseName("ix_character_memories_type");

                    b.HasIndex("CharacterInstanceId", "Type")
                        .IsUnique()
                        .HasDatabaseName("ix_character_memories_character_instance_type");

                    b.ToTable("character_memories", (string)null);
                });

            modelBuilder.Entity("Edory.Character.Domain.Character", b =>
                {
                    b.OwnsOne("Edory.SharedKernel.ValueObjects.CharacterDna", "Dna", b1 =>
                        {
                            b1.Property<Guid>("CharacterId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Appearance")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("Appearance");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)")
                                .HasColumnName("Description");

                            b1.Property<int>("MaxAge")
                                .HasColumnType("integer")
                                .HasColumnName("MaxAge");

                            b1.Property<int>("MinAge")
                                .HasColumnType("integer")
                                .HasColumnName("MinAge");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.Property<string>("Personality")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)")
                                .HasColumnName("Personality");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");

                            b1.OwnsOne("Edory.SharedKernel.ValueObjects.CharacterTraits", "BaseTraits", b2 =>
                                {
                                    b2.Property<Guid>("CharacterDnaCharacterId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Courage")
                                        .HasColumnType("integer")
                                        .HasColumnName("BaseCourage");

                                    b2.Property<int>("Creativity")
                                        .HasColumnType("integer")
                                        .HasColumnName("BaseCreativity");

                                    b2.Property<int>("Curiosity")
                                        .HasColumnType("integer")
                                        .HasColumnName("BaseCuriosity");

                                    b2.Property<int>("Empathy")
                                        .HasColumnType("integer")
                                        .HasColumnName("BaseEmpathy");

                                    b2.Property<int>("Helpfulness")
                                        .HasColumnType("integer")
                                        .HasColumnName("BaseHelpfulness");

                                    b2.Property<int>("Humor")
                                        .HasColumnType("integer")
                                        .HasColumnName("BaseHumor");

                                    b2.Property<int>("Persistence")
                                        .HasColumnType("integer")
                                        .HasColumnName("BasePersistence");

                                    b2.Property<int>("Wisdom")
                                        .HasColumnType("integer")
                                        .HasColumnName("BaseWisdom");

                                    b2.HasKey("CharacterDnaCharacterId");

                                    b2.ToTable("Characters");

                                    b2.WithOwner()
                                        .HasForeignKey("CharacterDnaCharacterId");
                                });

                            b1.Navigation("BaseTraits")
                                .IsRequired();
                        });

                    b.Navigation("Dna")
                        .IsRequired();
                });

            modelBuilder.Entity("Edory.Character.Domain.CharacterInstance", b =>
                {
                    b.HasOne("Edory.Character.Domain.Character", null)
                        .WithMany()
                        .HasForeignKey("OriginalCharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Edory.SharedKernel.ValueObjects.CharacterDna", "BaseDna", b1 =>
                        {
                            b1.Property<Guid>("CharacterInstanceId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Appearance")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("BaseAppearance");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)")
                                .HasColumnName("BaseDescription");

                            b1.Property<int>("MaxAge")
                                .HasColumnType("integer")
                                .HasColumnName("BaseMaxAge");

                            b1.Property<int>("MinAge")
                                .HasColumnType("integer")
                                .HasColumnName("BaseMinAge");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("BaseName");

                            b1.Property<string>("Personality")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)")
                                .HasColumnName("BasePersonality");

                            b1.HasKey("CharacterInstanceId");

                            b1.ToTable("CharacterInstances");

                            b1.WithOwner()
                                .HasForeignKey("CharacterInstanceId");

                            b1.OwnsOne("Edory.SharedKernel.ValueObjects.CharacterTraits", "BaseTraits", b2 =>
                                {
                                    b2.Property<Guid>("CharacterDnaCharacterInstanceId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Courage")
                                        .HasColumnType("integer")
                                        .HasColumnName("BaseTraitsCourage");

                                    b2.Property<int>("Creativity")
                                        .HasColumnType("integer")
                                        .HasColumnName("BaseTraitsCreativity");

                                    b2.Property<int>("Curiosity")
                                        .HasColumnType("integer")
                                        .HasColumnName("BaseTraitsCuriosity");

                                    b2.Property<int>("Empathy")
                                        .HasColumnType("integer")
                                        .HasColumnName("BaseTraitsEmpathy");

                                    b2.Property<int>("Helpfulness")
                                        .HasColumnType("integer")
                                        .HasColumnName("BaseTraitsHelpfulness");

                                    b2.Property<int>("Humor")
                                        .HasColumnType("integer")
                                        .HasColumnName("BaseTraitsHumor");

                                    b2.Property<int>("Persistence")
                                        .HasColumnType("integer")
                                        .HasColumnName("BaseTraitsPersistence");

                                    b2.Property<int>("Wisdom")
                                        .HasColumnType("integer")
                                        .HasColumnName("BaseTraitsWisdom");

                                    b2.HasKey("CharacterDnaCharacterInstanceId");

                                    b2.ToTable("CharacterInstances");

                                    b2.WithOwner()
                                        .HasForeignKey("CharacterDnaCharacterInstanceId");
                                });

                            b1.Navigation("BaseTraits")
                                .IsRequired();
                        });

                    b.OwnsOne("Edory.SharedKernel.ValueObjects.CharacterTraits", "CurrentTraits", b1 =>
                        {
                            b1.Property<Guid>("CharacterInstanceId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Courage")
                                .HasColumnType("integer")
                                .HasColumnName("CurrentCourage");

                            b1.Property<int>("Creativity")
                                .HasColumnType("integer")
                                .HasColumnName("CurrentCreativity");

                            b1.Property<int>("Curiosity")
                                .HasColumnType("integer")
                                .HasColumnName("CurrentCuriosity");

                            b1.Property<int>("Empathy")
                                .HasColumnType("integer")
                                .HasColumnName("CurrentEmpathy");

                            b1.Property<int>("Helpfulness")
                                .HasColumnType("integer")
                                .HasColumnName("CurrentHelpfulness");

                            b1.Property<int>("Humor")
                                .HasColumnType("integer")
                                .HasColumnName("CurrentHumor");

                            b1.Property<int>("Persistence")
                                .HasColumnType("integer")
                                .HasColumnName("CurrentPersistence");

                            b1.Property<int>("Wisdom")
                                .HasColumnType("integer")
                                .HasColumnName("CurrentWisdom");

                            b1.HasKey("CharacterInstanceId");

                            b1.ToTable("CharacterInstances");

                            b1.WithOwner()
                                .HasForeignKey("CharacterInstanceId");
                        });

                    b.Navigation("BaseDna")
                        .IsRequired();

                    b.Navigation("CurrentTraits")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
